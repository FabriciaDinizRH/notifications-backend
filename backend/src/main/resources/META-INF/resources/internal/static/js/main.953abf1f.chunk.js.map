{"version":3,"sources":["generated/OpenapiInternal.ts","pages/AggregationPage.tsx","app/PermissionContext.ts","services/EmailTemplates/GetTemplates.tsx","components/EmailTemplates/ViewEmailTemplateModal.tsx","components/EmailTemplates/EmailTemplateTable.tsx","components/EventTypes/CreateEditModal.tsx","components/EventTypes/DeleteModal.tsx","components/Wrappers/LinkAdapter.tsx","components/Wrappers/BreadCrumbLinkItem.tsx","services/EventTypes/CreateEventTypes.ts","services/EventTypes/DeleteEventType.ts","services/EventTypes/GetApplication.ts","services/EventTypes/GetBundleAction.ts","services/EventTypes/GetEventTypes.ts","components/Applications/CreateEditApplicationModal.tsx","components/Applications/DeleteApplicationModal.tsx","components/EventTypes/ListEventTypes.tsx","services/Applications/CreateApplication.ts","services/Applications/DeleteApplication.ts","services/Applications/GetApplicationById.ts","services/Applications/GetBundleById.ts","components/SystemBehaviorGroups/CreateEditBehaviorGroupModal.tsx","components/SystemBehaviorGroups/DeleteBehaviorGroupModal.tsx","services/SystemBehaviorGroups/CreateSystemBehaviorGroup.tsx","services/SystemBehaviorGroups/DeleteSystemBehaviorGroup.tsx","services/SystemBehaviorGroups/GetBehaviorGroups.tsx","services/SystemBehaviorGroups/UpdateActions.tsx","pages/BundlePage/BehaviorGroupTable.tsx","pages/EmailTemplatePage.tsx","pages/MessageValidatorPage.tsx","services/RenderEmailRequest.ts","pages/RenderEmailPage.tsx","Routes.tsx","pages/ApplicationPage.tsx","pages/ApplicationPage/useEventTypes.ts","pages/BundlePage.tsx","app/Navigation.tsx","app/redhat-logo.svg","app/App.tsx","services/EventTypes/GetBundles.ts","services/ServerInfo.ts","services/Permissions.ts","index.tsx"],"names":["aggregationTemplate","trimLeft","PermissionContext","React","isAdmin","applications","roles","refresh","Error","useUserPermissions","permission","useContext","hasPermission","useCallback","appId","undefined","find","a","id","z","application_id","zodSchemaUUID","optional","nullable","role","nonstrict","bundle_id","display_name","name","owner_role","application","zodSchemaApplication1","body_template","zodSchemaTemplate","body_template_id","created","subject_template","subject_template_id","subscription_type","zodSchemaEmailSubscriptionType","updated","zodSchemaApplication","zodSchemaBasicAuthentication","actions","zodSchemaBehaviorGroupAction","bundle","zodSchemaBundle","default_behavior","zodSchemaBehaviorGroupActionId","zodSchemaCamelProperties","end_time","start_time","status","zodSchemaStatus","zodSchemaEmailSubscriptionProperties","zodSchemaEndpoint","data","links","meta","zodSchemaMeta","zodSchemaEndpointType","zodSchemaEnvironment","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","zodSchemaEventType","zodSchemaFacet","children","displayName","zodSchemaHttpType","event_type","event_type_id","application_display_name","is_admin","errors","details","endpointId","endpointSubType","endpointType","invocationResult","invocationTime","int","payload","ignore_preferences","only_admins","group_id","environment","zodSchemaWebhookProperties","max","password","username","endpoint","behaviorGroupId","basic_authentication","disable_ssl_verification","extras","secret_token","sub_type","url","description","enabled","properties","type","endpoint_id","endpoint_sub_type","endpoint_type","invocation_result","count","method","Schemas","InternalResourceHttpRoot","actionBuilder","queryParams","config","rules","ValidateRule","__Empty","build","Response200","InternalApplicationUserPermission","InternalPermissionResourceGetAccessList","InternalPermissionResourceAddAccess","params","body","InternalRoleAccess","InternalPermissionResourceGetPermissions","InternalUserPermissions","InternalPermissionResourceDeleteAccess","path","replace","internalRoleAccessId","toString","AdminResourceDebugRbac","query","rhid","AdminResourceSetAdminDown","AdminResourceMigrate","AdminResourceDeleteAllTemplates","InternalResourceCreateApplication","Application1","InternalResourceGetApplication","InternalResourceUpdateApplication","InternalResourceDeleteApplication","EventType","InternalResourceGetEventTypes","BehaviorGroup","InternalResourceGetDefaultBehaviorGroups","InternalResourceCreateDefaultBehaviorGroup","RequestDefaultBehaviorGroupPropertyList","InternalResourceUpdateDefaultBehaviorGroupActions","eventTypeId","InternalResourceLinkDefaultBehaviorToEventType","InternalResourceUnlinkDefaultBehaviorToEventType","InternalResourceUpdateDefaultBehaviorGroup","InternalResourceDeleteDefaultBehaviorGroup","Bundle","InternalResourceGetBundles","InternalResourceCreateBundle","InternalResourceGetBundle","bundleId","InternalResourceUpdateBundle","InternalResourceDeleteBundle","InternalResourceGetApplications","InternalResourceCreateEventType","InternalResourceUpdateEventType","InternalResourceDeleteEventType","InternalResourceGetServerInfo","ServerInfo","InternalResourceSetCurrentStatus","Template","TemplateResourceGetAllTemplates","TemplateResourceCreateTemplate","AggregationEmailTemplate","TemplateResourceGetAllAggregationEmailTemplates","TemplateResourceCreateAggregationEmailTemplate","TemplateResourceGetAggregationEmailTemplatesByApplication","TemplateResourceGetAggregationemailTemplate","templateId","TemplateResourceUpdateAggregationEmailTemplate","TemplateResourceDeleteAggregationEmailTemplate","InstantEmailTemplate","applicationId","TemplateResourceGetAllInstantEmailTemplates","TemplateResourceCreateInstantEmailTemplate","Response404","TemplateResourceGetInstantEmailTemplateByEventType","TemplateResourceGetInstantEmailTemplate","TemplateResourceUpdateInstantEmailTemplate","TemplateResourceDeleteInstantEmailTemplate","subject","Response400","message","TemplateResourceRenderEmailTemplate","TemplateResourceGetTemplate","TemplateResourceUpdateTemplate","TemplateResourceDeleteTemplate","ValidationResourceValidate","eventType","ValidationResourceValidateMessage","MessageValidationResponse","InternalResourceGetVersion","Operations","validateResponse","validationResponseTransformer","emailTemplates","value","map","validatedResponse","ViewTemplateModal","props","Fragment","Modal","variant","ModalVariant","medium","title","applicationName","isOpen","showModal","onClose","Form","isHorizontal","ActionGroup","Button","onClick","EmailTemplateTable","getAllTemplates","useQuery","actionCreator","queryPayload","useMemo","useGetTemplates","showViewModal","setShowViewModal","viewModal","loading","Spinner","errorObject","PageSection","Title","headingLevel","Breadcrumb","BreadcrumbItem","target","TableComposable","aria-label","Thead","Toolbar","ToolbarContent","ToolbarItem","isDisabled","component","to","linkTo","Tr","column","columnIndex","Th","Tbody","e","Td","className","CreateEditModal","useState","initialEventType","setEventType","handleChange","event","prev","onSubmitLocal","onSubmit","useEffect","isEdit","FormGroup","label","fieldId","isRequired","helperText","HelperText","HelperTextItem","hasIcon","TextInput","onChange","TextArea","isLoading","DeleteModal","setErrors","onDelete","onDeleteImpl","alert","small","titleIconVariant","eventTypeName","bundleName","LinkAdapter","href","restProps","BreadcrumbLinkItem","deleteEventTypeActionCreator","applicationTypes","getBundleAction","eventTypes","useEventTypes","CreateEditApplicationModal","permissions","initialApplication","setApplication","ownerRole","length","FormSelect","r","FormSelectOption","DeleteApplicationModal","ListEventTypes","getEventTypes","ChipGroup","Chip","isReadOnly","deleteApplicationActionCreator","bundleTypes","CreateEditBehaviorGroupModal","initialSystemBehaviorGroup","systemBehaviorGroup","setSystemBehaviorGroup","actionOption","isPlaceholder","open","DeleteBehaviorGroupModal","systemBehaviorGroupName","deleteBehaviorGroupActionCreator","systemBehaviorGroups","updateBehaviorGroupActionsActionCreator","BehaviorGroupsTable","getBehaviorGroups","response","filter","bg","useSystemBehaviorGroups","newBehaviorGroup","useMutation","deleteBehaviorGroupMutation","updateBehaviorActions","setShowModal","showDeleteModal","setShowDeleteModal","setIsEdit","handleSubmit","mutate","updateActionsMutate","then","finally","handleDelete","deleteBehaviorGroup","error","b","action","editSystemBehaviorGroup","deleteBehaviorGroupModal","defaultSubjectTemplate","defaultBodyTemplate","defaultPayload","JSON","stringify","timestamp","account_id","context","events","metadata","renderErrors","sortedKeys","Object","keys","sort","flatErrors","forEach","key","push","List","index","ListItem","RenderedTemplate","succeeded","StackItem","width","srcDoc","aggregation","email","messageValidator","pathRoutes","onEditorDidMount","editor","monaco","layout","focus","getModels","updateOptions","tabSize","_value","controls","CodeEditorControl","icon","toolTipText","console","log","isVisible","CodeEditor","isDownloadEnabled","isUploadEnabled","customControls","isLineNumbersVisible","isLanguageLabelVisible","isMinimapVisible","language","Language","javascript","code","height","useParams","eventTypesQuery","eventTypeRows","setEventTypeRows","useGetEventTypes","useClient","instantEmail","row","result","produce","draft","originalValue","original","findIndex","reload","applicationTypesQuery","useApplicationTypes","deleteEventTypeMutation","newEvent","setEventTypes","getBundleId","bundleNameQuery","useParameterizedQuery","deleteEventType","isActive","editEventType","deleteEventTypeModal","getBundles","useBundleTypes","getApplications","useApplications","newApplication","deleteApplicationMutation","deleteApplication","editApplication","deleteApplicationModal","renderedProps","emailTemplate","subjectTemplate","setSubjectTemplate","bodyTemplate","setBodyTemplate","setPayload","onRender","Split","SplitItem","isFilled","Stack","json","handleBackClick","history","back","hasGutter","validationStatus","validationMessage","validateService","setMessage","validationResult","setValidationResult","runValidation","jsonMessage","parse","$","validatePayloadButton","color","global_palette_green_400","AlertVariant","success","danger","warning","Alert","isInline","showEditor","isCopyEnabled","Routes","_props","pathRoute","EnhancedNavItem","match","useRouteMatch","exact","NavItem","Navigation","Nav","NavList","NavExpandable","bundles","isExpanded","brandClassName","style","App","isNavOpen","setNavOpen","onNavToggle","client","mounted","useUnmountPromise","setBundles","setLoading","cQuery","bundleResponse","applicationsPromises","Promise","all","applicationResponses","reducedBundles","reduce","draftBundles","draftBundle","resolve","useBundles","serverInfo","show","content","permissionQuery","appHeader","PageHeader","showNavToggle","logo","Brand","src","alt","logoProps","Page","header","appSidebar","PageSidebar","nav","Provider","sidebar","createClient","responseInterceptors","validateSchemaResponseInterceptor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.953abf1f.chunk.js","sourcesContent":["/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const AddAccessRequest = zodSchemaAddAccessRequest();\n  export type AddAccessRequest = {\n    application_id?: UUID | undefined | null;\n    role?: string | undefined | null;\n  };\n\n  export const AddApplicationRequest = zodSchemaAddApplicationRequest();\n  export type AddApplicationRequest = {\n    bundle_id: UUID;\n    display_name: string;\n    name: string;\n    owner_role?: string | undefined | null;\n  };\n\n  export const AggregationEmailTemplate = zodSchemaAggregationEmailTemplate();\n  export type AggregationEmailTemplate = {\n    application?: Application1 | undefined | null;\n    application_id?: UUID | undefined | null;\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: string | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    subscription_type: EmailSubscriptionType;\n    updated?: string | undefined | null;\n  };\n\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    display_name: string;\n    id: UUID;\n  };\n\n  export const Application1 = zodSchemaApplication1();\n  export type Application1 = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    default_behavior?: boolean | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'INSTANT' | 'DAILY';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    sub_type?: string | undefined | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const Environment = zodSchemaEnvironment();\n  export type Environment = 'PROD' | 'STAGE' | 'EPHEMERAL' | 'LOCAL_SERVER';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n    payload?: string | undefined | null;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_id?: UUID | undefined | null;\n    endpoint_sub_type?: string | undefined | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application1 | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    children?: Array<Facet> | undefined | null;\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const InstantEmailTemplate = zodSchemaInstantEmailTemplate();\n  export type InstantEmailTemplate = {\n    body_template?: Template | undefined | null;\n    body_template_id: UUID;\n    created?: string | undefined | null;\n    event_type?: EventType | undefined | null;\n    event_type_id?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    subject_template?: Template | undefined | null;\n    subject_template_id: UUID;\n    updated?: string | undefined | null;\n  };\n\n  export const InternalApplicationUserPermission =\n    zodSchemaInternalApplicationUserPermission();\n  export type InternalApplicationUserPermission = {\n    application_display_name: string;\n    application_id: UUID;\n    role: string;\n  };\n\n  export const InternalRoleAccess = zodSchemaInternalRoleAccess();\n  export type InternalRoleAccess = {\n    application_id: UUID;\n    id?: UUID | undefined | null;\n    role: string;\n  };\n\n  export const InternalUserPermissions = zodSchemaInternalUserPermissions();\n  export type InternalUserPermissions = {\n    applications: Array<Application>;\n    is_admin: boolean;\n    roles: Array<string>;\n  };\n\n  export const MessageValidationResponse = zodSchemaMessageValidationResponse();\n  export type MessageValidationResponse = {\n    errors: {\n      [x: string]: Array<string>;\n    };\n  };\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    endpointSubType?: string | undefined | null;\n    endpointType?: EndpointType | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const PageEventType = zodSchemaPageEventType();\n  export type PageEventType = {\n    data: Array<EventType>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestDefaultBehaviorGroupPropertyList =\n    zodSchemaRequestDefaultBehaviorGroupPropertyList();\n  export type RequestDefaultBehaviorGroupPropertyList = {\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    only_admins: boolean;\n  };\n\n  export const ServerInfo = zodSchemaServerInfo();\n  export type ServerInfo = {\n    environment?: Environment | undefined | null;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'UP' | 'MAINTENANCE';\n\n  export const Template = zodSchemaTemplate();\n  export type Template = {\n    created?: string | undefined | null;\n    data: string;\n    description: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaAddAccessRequest() {\n      return z\n      .object({\n          application_id: zodSchemaUUID().optional().nullable(),\n          role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAddApplicationRequest() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          display_name: z.string(),\n          name: z.string(),\n          owner_role: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaAggregationEmailTemplate() {\n      return z\n      .object({\n          application: zodSchemaApplication1().optional().nullable(),\n          application_id: zodSchemaUUID().optional().nullable(),\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          subscription_type: zodSchemaEmailSubscriptionType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          display_name: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaApplication1() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          default_behavior: z.boolean().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'INSTANT', 'DAILY' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          sub_type: z.string().optional().nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEnvironment() {\n      return z.enum([ 'PROD', 'STAGE', 'EPHEMERAL', 'LOCAL_SERVER' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID(),\n          payload: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_id: zodSchemaUUID().optional().nullable(),\n          endpoint_sub_type: z.string().optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication1().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          children: z\n          .array(z.lazy(() => zodSchemaFacet()))\n          .optional()\n          .nullable(),\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaInstantEmailTemplate() {\n      return z\n      .object({\n          body_template: zodSchemaTemplate().optional().nullable(),\n          body_template_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          event_type: zodSchemaEventType().optional().nullable(),\n          event_type_id: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          subject_template: zodSchemaTemplate().optional().nullable(),\n          subject_template_id: zodSchemaUUID(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalApplicationUserPermission() {\n      return z\n      .object({\n          application_display_name: z.string(),\n          application_id: zodSchemaUUID(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalRoleAccess() {\n      return z\n      .object({\n          application_id: zodSchemaUUID(),\n          id: zodSchemaUUID().optional().nullable(),\n          role: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaInternalUserPermissions() {\n      return z\n      .object({\n          applications: z.array(zodSchemaApplication()),\n          is_admin: z.boolean(),\n          roles: z.array(z.string())\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMessageValidationResponse() {\n      return z\n      .object({\n          errors: z.record(z.array(z.string()))\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          endpointSubType: z.string().optional().nullable(),\n          endpointType: zodSchemaEndpointType().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventType() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventType()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestDefaultBehaviorGroupPropertyList() {\n      return z\n      .object({\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaServerInfo() {\n      return z\n      .object({\n          environment: zodSchemaEnvironment().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'UP', 'MAINTENANCE' ]);\n  }\n\n  function zodSchemaTemplate() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          data: z.string(),\n          description: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /\n  export namespace InternalResourceHttpRoot {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access\n  export namespace InternalPermissionResourceGetAccessList {\n    const Response200 = z.array(Schemas.InternalApplicationUserPermission);\n    type Response200 = Array<Schemas.InternalApplicationUserPermission>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /access\n  export namespace InternalPermissionResourceAddAccess {\n    export interface Params {\n      body: Schemas.AddAccessRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'InternalRoleAccess', 200, Schemas.InternalRoleAccess>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalRoleAccess,\n                    'InternalRoleAccess',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /access/me\n  export namespace InternalPermissionResourceGetPermissions {\n    export type Payload =\n      | ValidatedResponse<\n          'InternalUserPermissions',\n          200,\n          Schemas.InternalUserPermissions\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './access/me';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InternalUserPermissions,\n                    'InternalUserPermissions',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /access/{internalRoleAccessId}\n  export namespace InternalPermissionResourceDeleteAccess {\n    export interface Params {\n      internalRoleAccessId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './access/{internalRoleAccessId}'.replace(\n            '{internalRoleAccessId}',\n            params.internalRoleAccessId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /admin\n  export namespace AdminResourceDebugRbac {\n    const Rhid = z.string();\n    type Rhid = string;\n    export interface Params {\n      rhid?: Rhid;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin';\n        const query = {} as Record<string, any>;\n        if (params.rhid !== undefined) {\n            query.rhid = params.rhid;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /admin/status\n  export namespace AdminResourceSetAdminDown {\n    const Status = z.string();\n    type Status = string;\n    export interface Params {\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin/status';\n        const query = {} as Record<string, any>;\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /admin/templates/migrate\n  export namespace AdminResourceMigrate {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './admin/templates/migrate';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /admin/templates/migrate\n  export namespace AdminResourceDeleteAllTemplates {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './admin/templates/migrate';\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /applications\n  export namespace InternalResourceCreateApplication {\n    export interface Params {\n      body: Schemas.AddApplicationRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application1', 200, Schemas.Application1>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application1, 'Application1', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}\n  export namespace InternalResourceGetApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application1', 200, Schemas.Application1>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Application1, 'Application1', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /applications/{appId}\n  export namespace InternalResourceUpdateApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n      body: Schemas.Application1;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /applications/{appId}\n  export namespace InternalResourceDeleteApplication {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}/eventTypes\n  export namespace InternalResourceGetEventTypes {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}/eventTypes'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /behaviorGroups/default\n  export namespace InternalResourceGetDefaultBehaviorGroups {\n    const Response200 = z.array(Schemas.BehaviorGroup);\n    type Response200 = Array<Schemas.BehaviorGroup>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /behaviorGroups/default\n  export namespace InternalResourceCreateDefaultBehaviorGroup {\n    export interface Params {\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'BehaviorGroup', 200, Schemas.BehaviorGroup>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.BehaviorGroup, 'BehaviorGroup', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/actions\n  // Update the list of actions of a default behavior group.\n  export namespace InternalResourceUpdateDefaultBehaviorGroupActions {\n    const Body = z.array(Schemas.RequestDefaultBehaviorGroupPropertyList);\n    type Body = Array<Schemas.RequestDefaultBehaviorGroupPropertyList>;\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{behaviorGroupId}/actions'.replace(\n            '{behaviorGroupId}',\n            params.behaviorGroupId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Links the default behavior group to the event type.\n  export namespace InternalResourceLinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}\n  // Unlinks the default behavior group from the event type.\n  export namespace InternalResourceUnlinkDefaultBehaviorToEventType {\n    const Response200 = z.string();\n    type Response200 = string;\n    export interface Params {\n      behaviorGroupId: Schemas.UUID;\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path =\n        './behaviorGroups/default/{behaviorGroupId}/eventType/{eventTypeId}'\n        .replace('{behaviorGroupId}', params.behaviorGroupId.toString())\n        .replace('{eventTypeId}', params.eventTypeId.toString());\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /behaviorGroups/default/{id}\n  // Update a default behavior group.\n  export namespace InternalResourceUpdateDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n      body: Schemas.BehaviorGroup;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /behaviorGroups/default/{id}\n  // Deletes a default behavior group.\n  export namespace InternalResourceDeleteDefaultBehaviorGroup {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      id: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './behaviorGroups/default/{id}'.replace(\n            '{id}',\n            params.id.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles\n  export namespace InternalResourceGetBundles {\n    const Response200 = z.array(Schemas.Bundle);\n    type Response200 = Array<Schemas.Bundle>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /bundles\n  export namespace InternalResourceCreateBundle {\n    export interface Params {\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}\n  export namespace InternalResourceGetBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Bundle, 'Bundle', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /bundles/{bundleId}\n  export namespace InternalResourceUpdateBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /bundles/{bundleId}\n  export namespace InternalResourceDeleteBundle {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}/applications\n  export namespace InternalResourceGetApplications {\n    const Response200 = z.array(Schemas.Application1);\n    type Response200 = Array<Schemas.Application1>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}/applications'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /eventTypes\n  export namespace InternalResourceCreateEventType {\n    export interface Params {\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.EventType, 'EventType', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /eventTypes/{eventTypeId}\n  export namespace InternalResourceUpdateEventType {\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /eventTypes/{eventTypeId}\n  export namespace InternalResourceDeleteEventType {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /serverInfo\n  export namespace InternalResourceGetServerInfo {\n    export type Payload =\n      | ValidatedResponse<'ServerInfo', 200, Schemas.ServerInfo>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './serverInfo';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.ServerInfo, 'ServerInfo', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /status\n  export namespace InternalResourceSetCurrentStatus {\n    export interface Params {\n      body: Schemas.CurrentStatus;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './status';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 204),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates\n  export namespace TemplateResourceGetAllTemplates {\n    const Response200 = z.array(Schemas.Template);\n    type Response200 = Array<Schemas.Template>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './templates';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates\n  export namespace TemplateResourceCreateTemplate {\n    export interface Params {\n      body: Schemas.Template;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Template', 200, Schemas.Template>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Template, 'Template', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation\n  export namespace TemplateResourceGetAllAggregationEmailTemplates {\n    const Response200 = z.array(Schemas.AggregationEmailTemplate);\n    type Response200 = Array<Schemas.AggregationEmailTemplate>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './templates/email/aggregation';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/aggregation\n  export namespace TemplateResourceCreateAggregationEmailTemplate {\n    export interface Params {\n      body: Schemas.AggregationEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'AggregationEmailTemplate',\n          200,\n          Schemas.AggregationEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.AggregationEmailTemplate,\n                    'AggregationEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation/application/{appId}\n  export namespace TemplateResourceGetAggregationEmailTemplatesByApplication {\n    const Response200 = z.array(Schemas.AggregationEmailTemplate);\n    type Response200 = Array<Schemas.AggregationEmailTemplate>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/application/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceGetAggregationemailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'AggregationEmailTemplate',\n          200,\n          Schemas.AggregationEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.AggregationEmailTemplate,\n                    'AggregationEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceUpdateAggregationEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.AggregationEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/email/aggregation/{templateId}\n  export namespace TemplateResourceDeleteAggregationEmailTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/aggregation/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant\n  export namespace TemplateResourceGetAllInstantEmailTemplates {\n    const Response200 = z.array(Schemas.InstantEmailTemplate);\n    type Response200 = Array<Schemas.InstantEmailTemplate>;\n    export interface Params {\n      applicationId?: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant';\n        const query = {} as Record<string, any>;\n        if (params.applicationId !== undefined) {\n            query.applicationId = params.applicationId;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/instant\n  export namespace TemplateResourceCreateInstantEmailTemplate {\n    export interface Params {\n      body: Schemas.InstantEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant/eventType/{eventTypeId}\n  export namespace TemplateResourceGetInstantEmailTemplateByEventType {\n    const Response404 = z.string();\n    type Response404 = string;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', 404, Response404>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/eventType/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403),\n                new ValidateRule(Response404, 'unknown', 404)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/email/instant/{templateId}\n  export namespace TemplateResourceGetInstantEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<\n          'InstantEmailTemplate',\n          200,\n          Schemas.InstantEmailTemplate\n        >\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(\n                    Schemas.InstantEmailTemplate,\n                    'InstantEmailTemplate',\n                    200\n                ),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/email/instant/{templateId}\n  export namespace TemplateResourceUpdateInstantEmailTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.InstantEmailTemplate;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/email/instant/{templateId}\n  export namespace TemplateResourceDeleteInstantEmailTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/instant/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/render\n  export namespace TemplateResourceRenderEmailTemplate {\n    const Response200 = z\n    .object({\n        body: z.string().optional().nullable(),\n        subject: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response200 = {\n      body?: string | undefined | null;\n      subject?: string | undefined | null;\n    };\n    const Response400 = z\n    .object({\n        message: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response400 = {\n      message?: string | undefined | null;\n    };\n    export interface Params {\n      body: Schemas.RenderEmailTemplateRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/render';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /templates/{templateId}\n  export namespace TemplateResourceGetTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Template', 200, Schemas.Template>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.Template, 'Template', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // PUT /templates/{templateId}\n  export namespace TemplateResourceUpdateTemplate {\n    export interface Params {\n      templateId: Schemas.UUID;\n      body: Schemas.Template;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // DELETE /templates/{templateId}\n  export namespace TemplateResourceDeleteTemplate {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      templateId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/{templateId}'.replace(\n            '{templateId}',\n            params.templateId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /validation/baet\n  export namespace ValidationResourceValidate {\n    const Application = z.string();\n    type Application = string;\n    const Bundle = z.string();\n    type Bundle = string;\n    const EventType = z.string();\n    type EventType = string;\n    export interface Params {\n      application?: Application;\n      bundle?: Bundle;\n      eventType?: EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './validation/baet';\n        const query = {} as Record<string, any>;\n        if (params.application !== undefined) {\n            query.application = params.application;\n        }\n\n        if (params.bundle !== undefined) {\n            query.bundle = params.bundle;\n        }\n\n        if (params.eventType !== undefined) {\n            query.eventType = params.eventType;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /validation/message\n  export namespace ValidationResourceValidateMessage {\n    const Body = z.string();\n    type Body = string;\n    export interface Params {\n      body: Body;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<\n          'MessageValidationResponse',\n          400,\n          Schemas.MessageValidationResponse\n        >\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './validation/message';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Schemas.__Empty, '__Empty', 200),\n                new ValidateRule(\n                    Schemas.MessageValidationResponse,\n                    'MessageValidationResponse',\n                    400\n                )\n            ]\n        })\n        .build();\n    };\n  }\n  // GET /version\n  export namespace InternalResourceGetVersion {\n    const Response200 = z.string();\n    type Response200 = string;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'__Empty', 401, Schemas.__Empty>\n      | ValidatedResponse<'__Empty', 403, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './version';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Schemas.__Empty, '__Empty', 401),\n                new ValidateRule(Schemas.__Empty, '__Empty', 403)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport { PlayIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { useMemo } from 'react';\n\nconst aggregationTemplate = `\n// Here we can initialize the value of the Aggregation result.\nconst result = {\n};\n\n// This function will be called by every action that was sent to notification server\n// to update the result with its values.\nconst aggregate = (action) => {\n\n    return result;\n};\n`.trimLeft();\n\nexport const AggregationPage: React.FunctionComponent<unknown> = () => {\n\n    const onEditorDidMount = React.useCallback((editor, monaco) => {\n        editor.layout();\n        editor.focus();\n        monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n    }, []);\n\n    const onChange = React.useCallback((_value) => {\n        // does not do anything yet\n    }, []);\n\n    const controls = useMemo(() => [\n        <CodeEditorControl\n            key=\"test\"\n            icon={ <PlayIcon /> }\n            toolTipText=\"Test aggregation\"\n            onClick={ () => console.log('testing') }\n            isVisible={ true }\n        />\n    ], []);\n\n    return <>\n        <PageSection>\n            <Title headingLevel=\"h1\">Aggregation templates</Title>\n        </PageSection>\n        <PageSection>\n            <CodeEditor\n                isDownloadEnabled\n                isUploadEnabled\n                customControls={ controls }\n                isLineNumbersVisible\n                isLanguageLabelVisible\n                isMinimapVisible={ false }\n                language={ Language.javascript }\n                onEditorDidMount={ onEditorDidMount }\n                onChange={ onChange }\n                code={ aggregationTemplate }\n                height=\"300px\"\n            />\n        </PageSection>\n    </>;\n};\n","import * as React from 'react';\nimport { useCallback, useContext } from 'react';\n\nimport { Schemas } from '../generated/OpenapiInternal';\n\nexport interface PermissionContext {\n    isAdmin: boolean;\n    applications: ReadonlyArray<{\n        id: string;\n        displayName: string;\n    }>;\n    roles: ReadonlyArray<string>;\n    refresh: () => void;\n}\n\nexport const PermissionContext = React.createContext<PermissionContext>({\n    isAdmin: false,\n    applications: [],\n    roles: [],\n    refresh: () => {\n        throw new Error('Invalid use of refresh');\n    }\n});\n\nexport const useUserPermissions = () => {\n    const permission = useContext(PermissionContext);\n\n    const hasPermission = useCallback((appId: Schemas.UUID) => {\n        if (permission.isAdmin) {\n            return true;\n        }\n\n        return permission.applications.find(a => a.id === appId) !== undefined;\n    }, [ permission ]);\n\n    return {\n        ...permission,\n        hasPermission\n    };\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Template } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.TemplateResourceGetAllTemplates.Payload) => {\n        if (payload.status === 200) {\n            const emailTemplates: ReadonlyArray<Template> = payload.value.map(value => ({\n                id: value.id,\n                name: value.name,\n                description: value.description,\n                data: value.data\n            }));\n\n            return validatedResponse(\n                'emailTemplates',\n                200,\n                emailTemplates,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useGetTemplates = () => {\n    const query = useQuery(Operations.TemplateResourceGetAllTemplates.actionCreator());\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { ActionGroup, Button, Form, Modal, ModalVariant } from '@patternfly/react-core';\nimport React from 'react';\n\ninterface ViewTemplateModalProps {\n    showModal: boolean;\n    applicationName?: string | undefined;\n    onClose: () => void;\n}\n\nexport const ViewTemplateModal: React.FunctionComponent<ViewTemplateModalProps> = (props) => {\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ ` Email Template for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    Viewing modal for existing templates\n                    <ActionGroup>\n                        <Button variant='primary' type='reset'\n                            onClick={ props.onClose }>Close</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { EyeIcon, PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { linkTo } from '../../Routes';\nimport { useGetTemplates } from '../../services/EmailTemplates/GetTemplates';\nimport { ViewTemplateModal } from './ViewEmailTemplateModal';\n\ninterface EmailTemplateTableProps {\n    application: string;\n}\n\nexport const EmailTemplateTable: React.FunctionComponent<EmailTemplateTableProps> = props => {\n    const { hasPermission } = useUserPermissions();\n    const getAllTemplates = useGetTemplates();\n\n    const [ showViewModal, setShowViewModal ] = React.useState(false);\n    const viewModal = () => {\n        setShowViewModal(true);\n    };\n\n    const onClose = () => {\n        setShowViewModal(false);\n    };\n\n    const columns = [ 'Email Templates' ];\n\n    if (getAllTemplates.loading) {\n        return <Spinner />;\n    }\n\n    if (getAllTemplates.payload?.status !== 200) {\n        return <span>Error while loading templates: {getAllTemplates.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'>Email Templates</BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable aria-label=\"Email Template table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant=\"primary\" isDisabled={ !hasPermission(props.application) }\n                                        component={ (props: any) =>\n                                            <Link { ...props } to={ linkTo.emailTemplates } /> }>Create Email Template</Button>\n                                    <ViewTemplateModal\n                                        showModal={ showViewModal }\n                                        applicationName={ props.application }\n                                        onClose={ onClose }\n                                    />\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { getAllTemplates.payload.value.map(e => (\n                            <Tr key={ e.id }>\n                                <Td>{ e.name }</Td>\n                                <Td>\n                                    <Button className='view' type='button' variant='plain' onClick={ viewModal }\n                                    > { <EyeIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n\n","import { ActionGroup, Button, Form, FormGroup,\n    HelperText, HelperTextItem, Modal, ModalVariant, TextArea, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface CreateEditModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    initialEventType?: Partial<EventType>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (eventType: Partial<EventType>) => void;\n}\n\nexport const CreateEditModal: React.FunctionComponent<CreateEditModalProps> = (props) => {\n\n    const [ eventType, setEventType ] = React.useState<Partial<EventType>>(props.initialEventType ?? {});\n\n    const handleChange = (value: string, event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n        const target = event.target as HTMLInputElement;\n        setEventType(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(eventType);\n    }, [ eventType, props ]);\n\n    React.useEffect(() => {\n        setEventType(props.initialEventType ?? {});\n    }, [ props.initialEventType ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? 'Update' : 'Create'} Event Type for ${ props.applicationName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ eventType.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ eventType.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    <FormGroup label='Description' fieldId='description'\n                        helperText='Optional short description that appears in the UI\n                                                to help admin decide how to notify users.'>\n                        <TextArea\n                            type='text'\n                            value={ eventType.description }\n                            onChange={ handleChange }\n                            id='description'\n                            name=\"description\"\n                        /></FormGroup>\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteModalProps {\n    eventTypeName?: string;\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteModal: React.FunctionComponent<DeleteModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete event type, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.eventTypeName) {\n            return setErrors(true);\n        } else if (target.value === props.eventTypeName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.eventTypeName }` }>\n                { <b>{ props.eventTypeName }</b> } {`from  ${ props.applicationName }/${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        If an application is currently sending this event, it will no longer be processed.`}\n                <br />\n                <br />\n                        Type <b>{ props.eventTypeName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype LinkAdapterProps = any & {\n    href: string;\n};\n\nexport const LinkAdapter: React.FunctionComponent<LinkAdapterProps> = (props) => {\n    const { href, ...restProps } = props;\n    return (\n        <Link to={ href } { ...restProps }>{ props.children }</Link>\n    );\n};\n","import { BreadcrumbItem, BreadcrumbItemProps } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { LinkAdapter } from './LinkAdapter';\n\ntype BreadcrumbLinkItemProps = Omit<BreadcrumbItemProps, 'component'>\n\nexport const BreadcrumbLinkItem: React.FunctionComponent<BreadcrumbLinkItemProps> = (props) => {\n    return (\n        <BreadcrumbItem\n            { ...props }\n            component={ LinkAdapter }\n        >\n            { props.children }\n        </BreadcrumbItem>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateEventType = {\n    id?: string;\n    displayName: string;\n    description: string;\n    applicationId: string;\n    name: string;\n\n}\n\nconst actionCreator =  (params: CreateEventType) => {\n    if (params.id === undefined) {\n        return Operations.InternalResourceCreateEventType.actionCreator({\n            body: {\n                id: params.id,\n                application_id: params.applicationId,\n                description: params.description,\n                display_name: params.displayName,\n                name: params.name\n\n            }\n        });\n    }\n\n    return Operations.InternalResourceUpdateEventType.actionCreator({\n        eventTypeId: params.id,\n        body: {\n            id: params.id,\n            application_id: params.applicationId,\n            description: params.description,\n            display_name: params.displayName,\n            name: params.name\n\n        }\n    });\n};\n\nexport const useCreateEventType = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteEventTypeActionCreator = (eventTypeId: string) => {\n    return Operations.InternalResourceDeleteEventType.actionCreator({\n        eventTypeId\n    });\n};\n\nexport const useDeleteEventType = () => useMutation<boolean>(deleteEventTypeActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetApplication.Payload) => {\n        if (payload.status === 200) {\n            const applicationTypes: Application = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                name: payload.value.name,\n                bundleId: payload.value.bundle_id };\n\n            return validatedResponse(\n                'Application',\n                200,\n                applicationTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplicationTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalResourceGetApplication.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { Operations } from '../../generated/OpenapiInternal';\n\nexport const getBundleAction = (bundleId: string) => {\n    return Operations.InternalResourceGetBundle.actionCreator({\n        bundleId\n    });\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { EventType } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetEventTypes.Payload) => {\n        if (payload.status === 200) {\n            const eventTypes: ReadonlyArray<EventType> = payload.value.map(value => ({\n                id: value.id ?? '',\n                name: value.name,\n                displayName: value.display_name,\n                description: value.description ?? '',\n                applicationId: value.application_id\n            }));\n\n            return validatedResponse(\n                'EventTypes',\n                200,\n                eventTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useEventTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalResourceGetEventTypes.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import {\n    ActionGroup,\n    Button,\n    Form,\n    FormGroup,\n    FormSelect, FormSelectOption,\n    HelperText,\n    HelperTextItem,\n    Modal,\n    ModalVariant,\n    TextInput\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport { useUserPermissions } from '../../app/PermissionContext';\nimport { Application, RoleOwnedApplication } from '../../types/Notifications';\n\ninterface CreateEditApplicationModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    applicationName?: string;\n    bundleName?: string;\n    initialApplication?: Partial<Application>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (application: Partial<RoleOwnedApplication>) => void;\n}\n\nexport const CreateEditApplicationModal: React.FunctionComponent<CreateEditApplicationModalProps> = (props) => {\n\n    const permissions = useUserPermissions();\n    const [ application, setApplication ] = React.useState<Partial<RoleOwnedApplication>>({\n        ...props.initialApplication\n    });\n\n    const handleChange = (\n        value: string,\n        event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement> | React.FormEvent<HTMLSelectElement>) => {\n        const target = event.target as HTMLInputElement;\n        setApplication(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(application);\n    }, [ application, props ]);\n\n    React.useEffect(() => {\n        if (application.ownerRole === undefined && permissions.roles.length > 0) {\n            setApplication(prev => ({\n                ...prev,\n                ownerRole: permissions.roles[0]\n            }));\n        }\n    }, [ permissions.roles, application.ownerRole ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? `Update ${ props.applicationName }` : 'Create Application'} for ${ props.bundleName }` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Name' fieldId='name' isRequired\n                        helperText={ props.isEdit ? <HelperText><HelperTextItem variant=\"warning\" hasIcon>\n                                                    If this field is modified it may affect exisiting behavior.\n                        </HelperTextItem></HelperText> : 'This is a short name, only composed of a-z 0-9 and - characters.' }>\n                        <TextInput\n                            type='text'\n                            value={ application.name }\n                            onChange={ handleChange }\n                            id='name'\n                            name=\"name\"\n                        /></FormGroup>\n                    <FormGroup label='Display name' fieldId='display-name' isRequired\n                        helperText='This is the name you want to display on the UI'>\n                        <TextInput\n                            type='text'\n                            value={ application.displayName }\n                            onChange={ handleChange }\n                            id='display-name'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    { !props.isEdit && <FormGroup\n                        fieldId=\"role-name\"\n                        label=\"Role admin\"\n                        helperText=\"Role of users who will manage the application\"\n                    >\n                        { permissions.isAdmin ? (\n                            <TextInput\n                                type='text'\n                                onChange={ handleChange }\n                                value={ application.ownerRole }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            />\n                        ) : (\n                            <FormSelect\n                                isRequired\n                                value={ application.ownerRole }\n                                onChange={ handleChange }\n                                id='owner-role'\n                                name=\"ownerRole\"\n                            >\n                                { permissions.roles.map(r => <FormSelectOption key={ r } label={ r } value={ r } />) }\n                            </FormSelect>\n                        )}\n                    </FormGroup>\n                    }\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { EventType } from '../../types/Notifications';\n\ninterface DeleteApplicationModalProps {\n    onDelete: (eventType?: EventType) => Promise<boolean>;\n    bundleName?: string;\n    applicationName?: string;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteApplicationModal: React.FunctionComponent<DeleteApplicationModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete application, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.applicationName) {\n            return setErrors(true);\n        } else if (target.value === props.applicationName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.applicationName }` }>\n                { <b>{ props.applicationName }</b> } {`from ${ props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. \n                        By deleting this application all associated event types will be deleted and no longer processed. `}\n                <br />\n                <br />\n                        Type <b>{ props.applicationName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import { Chip, ChipGroup, Spinner } from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useEventTypes } from '../../services/EventTypes/GetEventTypes';\n\ntype EventTypeListProps = {\n    appId: string;\n}\n\nexport const ListEventTypes: React.FunctionComponent<EventTypeListProps> = (props) => {\n    const getEventTypes = useEventTypes(props.appId);\n\n    if (getEventTypes.loading) {\n        return <Spinner />;\n    }\n\n    if (getEventTypes.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {getEventTypes.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <ChipGroup>\n                { getEventTypes.payload.value.length === 0 ? 'No event types' : '' }\n            </ChipGroup>\n            <ChipGroup>\n                { getEventTypes.payload.value.map(e => (\n                    <Chip isReadOnly key={ e.id }>{ e.displayName}</Chip>\n                ))}\n            </ChipGroup>\n        </React.Fragment>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport type CreateApplication = {\n    id?: string;\n    displayName: string;\n    bundleId: string;\n    name: string;\n    ownerRole?: string;\n}\n\nconst actionCreator =  (params: CreateApplication) => {\n    if (params.id === undefined) {\n        return Operations.InternalResourceCreateApplication.actionCreator({\n            body: {\n                bundle_id: params.bundleId,\n                display_name: params.displayName,\n                name: params.name,\n                owner_role: params.ownerRole\n            }\n        });\n    }\n\n    return Operations.InternalResourceUpdateApplication.actionCreator({\n        appId: params.id,\n        body: {\n            id: params.id,\n            bundle_id: params.bundleId,\n            display_name: params.displayName,\n            name: params.name\n        }\n    });\n};\n\nexport const useCreateApplication = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\n\nexport const deleteApplicationActionCreator = (appId: string) => {\n    return Operations.InternalResourceDeleteApplication.actionCreator({\n        appId\n    });\n};\n\nexport const useDeleteApplication = () => useMutation<boolean>(deleteApplicationActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Application } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetApplications.Payload) => {\n        if (payload.status === 200) {\n            const applications: ReadonlyArray<Application> = payload.value.map(value => ({\n                id: value.id ?? '',\n                displayName: value.display_name,\n                bundleId: value.bundle_id,\n                name: value.name\n            }));\n\n            return validatedResponse(\n                'Applications',\n                200,\n                applications,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplications = (bundleId: string) => {\n    const query = useQuery(Operations.InternalResourceGetApplications.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetBundle.Payload) => {\n        if (payload.status === 200) {\n            const bundleTypes: Bundle = {\n                id: payload.value.id ?? '',\n                displayName: payload.value.display_name,\n                applications: []\n            };\n\n            return validatedResponse(\n                'Bundle',\n                200,\n                bundleTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useBundleTypes = (bundleId: string) => {\n    const query = useQuery(Operations.InternalResourceGetBundle.actionCreator({\n        bundleId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { ActionGroup, Button, Form, FormGroup,\n    FormSelect,\n    FormSelectOption,\n    Modal, ModalVariant, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { BehaviorGroup } from '../../types/Notifications';\n\ninterface CreateEditModalProps {\n    isEdit: boolean;\n    showModal: boolean;\n    initialSystemBehaviorGroup?: Partial<BehaviorGroup>;\n    isLoading: boolean;\n    onClose: () => void;\n    onSubmit: (systemBehaviorGroup: Partial<BehaviorGroup>) => void;\n}\n\nexport const CreateEditBehaviorGroupModal: React.FunctionComponent<CreateEditModalProps> = (props) => {\n\n    const [ systemBehaviorGroup, setSystemBehaviorGroup ] = React.useState<Partial<BehaviorGroup>>(props.initialSystemBehaviorGroup ?? {});\n\n    const actionOption = [\n        <FormSelectOption key='choose action' isPlaceholder label='Choose an action' />,\n        <FormSelectOption key='email-all' label='Send an email to Users: All' value='email-all' />,\n        <FormSelectOption key='email-admin' label='Send an email to Users: Admins' value='email-admin' />\n    ];\n\n    const handleChange = (value: string, event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>\n        | React.FormEvent<HTMLSelectElement>) => {\n        const target = event.target as HTMLInputElement | HTMLSelectElement;\n        setSystemBehaviorGroup(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const onSubmitLocal = React.useCallback(() => {\n        props.onSubmit(systemBehaviorGroup);\n    }, [ systemBehaviorGroup, props ]);\n\n    React.useEffect(() => {\n        setSystemBehaviorGroup(props.initialSystemBehaviorGroup ?? {});\n    }, [ props.initialSystemBehaviorGroup ]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant={ ModalVariant.medium }\n                title={ `${ props.isEdit ? 'Update' : 'Create'} your System Behavior Group` }\n                isOpen={ props.showModal }\n                onClose={ props.onClose }\n            ><Form isHorizontal>\n                    <FormGroup label='Group Name' fieldId='displayName' isRequired\n                        helperText='Enter a name for your group'>\n                        <TextInput\n                            type='text'\n                            value={ systemBehaviorGroup.displayName }\n                            onChange={ handleChange }\n                            id='displayName'\n                            name=\"displayName\"\n                        /></FormGroup>\n                    <FormGroup label='Action' fieldId='actions' isRequired>\n                        <FormSelect\n                            id='actions'\n                            name='actions'\n                            value={ systemBehaviorGroup.actions }\n                            open={ props.showModal }\n                            onChange={ handleChange }\n                        >\n                            { actionOption }\n                        </FormSelect>\n                    </FormGroup>\n                    <ActionGroup>\n                        <Button variant='primary' type='submit'\n                            isLoading={ props.isLoading } isDisabled={ props.isLoading }\n                            onClick={ onSubmitLocal }>{ props.isEdit ? 'Update' : 'Submit' }</Button>\n                        <Button variant='link' type='reset'\n                            onClick={ props.onClose }>Cancel</Button>\n                    </ActionGroup>\n                </Form>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\n","import { ActionGroup, Button, Modal, ModalVariant, Spinner, TextInput } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { BehaviorGroup } from '../../types/Notifications';\n\ninterface DeleteBehaviorGroupModalProps {\n    onDelete: (systemBehaviorGroup?: BehaviorGroup) => Promise<boolean>;\n    bundleName: string | undefined;\n    systemBehaviorGroupName: string | undefined;\n    isOpen: boolean;\n    onClose: () => void;\n\n}\nexport const DeleteBehaviorGroupModal: React.FunctionComponent<DeleteBehaviorGroupModalProps> = (props) => {\n    const [ errors, setErrors ] = React.useState(true);\n\n    const onDelete = React.useCallback(async () => {\n        const onDeleteImpl = props.onDelete;\n        const response = await onDeleteImpl();\n        if (response) {\n            props.onClose();\n        } else {\n            alert('Could not delete system behavior group, please try again.');\n        }\n    }, [ props ]);\n\n    const handleDeleteChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        if (target.value !== props.systemBehaviorGroupName) {\n            return setErrors(true);\n        } else if (target.value === props.systemBehaviorGroupName) {\n            return setErrors(false);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Modal variant={ ModalVariant.small } titleIconVariant=\"warning\" isOpen={ props.isOpen }\n                onClose={ props.onClose }\n                title={ `Permanently delete ${ props.systemBehaviorGroupName }` }>\n                { <b>{ props.systemBehaviorGroupName }</b> } from { props.bundleName ? props.bundleName :\n                    <Spinner /> } will be deleted. You will no longer be able to assign this system behavior\n                    group to event types and any associated event types will stop using this behavior group.\n                <br />\n                <br />\n                        Type <b>{ props.systemBehaviorGroupName }</b> to confirm:\n                <br />\n                <TextInput type='text' onChange={ handleDeleteChange } id='name' name=\"name\" isRequired />\n                <br />\n                <br />\n                <ActionGroup>\n                    <Button variant='danger' type='button' isDisabled = { errors }\n                        onClick={ onDelete }>Delete</Button>\n                    <Button variant='link' type='button' onClick={ props.onClose }>Cancel</Button>\n                </ActionGroup>\n            </Modal>\n        </React.Fragment>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { UUID } from '../../types/Notifications';\n\nexport type CreateSystemBehaviorGroup = {\n    bundleId: UUID;\n    displayName: string;\n    id?: UUID | undefined | null;\n}\n\nconst actionCreator =  (params: CreateSystemBehaviorGroup) => {\n    if (params.id === undefined) {\n        return Operations.InternalResourceCreateDefaultBehaviorGroup.actionCreator({\n            body: {\n                bundle_id: params.bundleId,\n                display_name: params.displayName,\n                id: params.id\n            }\n        });\n    }\n\n    return Operations.InternalResourceUpdateDefaultBehaviorGroup.actionCreator({\n        id: params.id ?? '',\n        body: {\n            bundle_id: params.bundleId,\n            display_name: params.displayName,\n            id: params.id\n        }\n    });\n};\n\nexport const useCreateSystemBehaviorGroup = () => {\n    return useMutation(actionCreator);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { UUID } from '../../types/Notifications';\n\nexport const deleteBehaviorGroupActionCreator = (id: UUID) => {\n    return Operations.InternalResourceDeleteDefaultBehaviorGroup.actionCreator({\n        id\n    });\n};\n\nexport const useDeleteBehaviorGroup = () => useMutation<boolean>(deleteBehaviorGroupActionCreator);\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { BehaviorGroup } from '../../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalResourceGetDefaultBehaviorGroups.Payload) => {\n        if (payload.status === 200) {\n            const systemBehaviorGroups: ReadonlyArray<BehaviorGroup> = payload.value.map(value => ({\n                bundleId: value.bundle_id,\n                displayName: value.display_name,\n                actions: value.actions,\n                id: value.id\n            }));\n\n            return validatedResponse(\n                'BehaviorGroups',\n                200,\n                systemBehaviorGroups,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useSystemBehaviorGroups = (bundleId: string) => {\n    const query = useQuery(Operations.InternalResourceGetDefaultBehaviorGroups.actionCreator());\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            const response = validateResponse(payload);\n            if (response.status === 200) {\n                response.value = response.value.filter(bg => bg.bundleId === bundleId);\n            }\n\n            return response;\n        }\n\n        return undefined;\n    }, [ query.payload, bundleId ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations, Schemas } from '../../generated/OpenapiInternal';\nimport { UUID } from '../../types/Notifications';\n\ntype UpdateBehaviorGroupActionsParams = {\n    behaviorGroupId: UUID;\n    body: Array<Schemas.RequestDefaultBehaviorGroupPropertyList>\n}\n\nconst updateBehaviorGroupActionsActionCreator =  (params: UpdateBehaviorGroupActionsParams) => {\n    return Operations.InternalResourceUpdateDefaultBehaviorGroupActions.actionCreator({\n        behaviorGroupId: params.behaviorGroupId,\n        body: params.body\n    });\n};\n\nexport const useUpdateBehaviorGroupActionsMutation = () => useMutation(updateBehaviorGroupActionsActionCreator);\n\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner,\n    Title, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\n\nimport { CreateEditBehaviorGroupModal } from '../../components/SystemBehaviorGroups/CreateEditBehaviorGroupModal';\nimport { DeleteBehaviorGroupModal } from '../../components/SystemBehaviorGroups/DeleteBehaviorGroupModal';\nimport { Schemas } from '../../generated/OpenapiInternal';\nimport { useCreateSystemBehaviorGroup } from '../../services/SystemBehaviorGroups/CreateSystemBehaviorGroup';\nimport { useDeleteBehaviorGroup } from '../../services/SystemBehaviorGroups/DeleteSystemBehaviorGroup';\nimport { useSystemBehaviorGroups } from '../../services/SystemBehaviorGroups/GetBehaviorGroups';\nimport { useUpdateBehaviorGroupActionsMutation } from '../../services/SystemBehaviorGroups/UpdateActions';\nimport { BehaviorGroup } from '../../types/Notifications';\n\ninterface BundlePageProps {\n    bundleId: string;\n    bundle: string | undefined;\n}\n\nexport const BehaviorGroupsTable: React.FunctionComponent<BundlePageProps> = (props) => {\n    const getBehaviorGroups = useSystemBehaviorGroups(props.bundleId);\n    const newBehaviorGroup = useCreateSystemBehaviorGroup();\n    const deleteBehaviorGroupMutation = useDeleteBehaviorGroup();\n    const updateBehaviorActions = useUpdateBehaviorGroupActionsMutation();\n\n    const columns = [ 'System Behavior Group', 'Action' ];\n\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n\n    const [ isEdit, setIsEdit ] = React.useState(false);\n\n    const [ systemBehaviorGroup, setSystemBehaviorGroup ] = React.useState<Partial<BehaviorGroup>>({});\n\n    const createBehaviorGroup = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setSystemBehaviorGroup({});\n    };\n\n    const editSystemBehaviorGroup = (b: BehaviorGroup) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setSystemBehaviorGroup(b);\n\n    };\n\n    const deleteBehaviorGroupModal = (b: BehaviorGroup) => {\n        setShowDeleteModal(true);\n        setSystemBehaviorGroup(b);\n    };\n\n    const handleSubmit = React.useCallback((systemBehaviorGroup) => {\n        setShowModal(false);\n        const mutate = newBehaviorGroup.mutate;\n        const updateActionsMutate = updateBehaviorActions.mutate;\n        mutate({\n            id: systemBehaviorGroup.id,\n            displayName: systemBehaviorGroup.displayName ?? '',\n            bundleId: props.bundleId\n        })\n        .then(response => {\n            if (response.payload?.status === 200 && (response.payload.value.id || systemBehaviorGroup.id)) {\n                return updateActionsMutate({\n                    behaviorGroupId: response.payload.value.id ?? systemBehaviorGroup.id,\n                    body: [\n                        {\n                            ignore_preferences: false,\n                            only_admins: systemBehaviorGroup.actions === 'email-admin'\n                        }\n                    ]\n                });\n            }\n        })\n        .finally(getBehaviorGroups.query);\n\n    }, [ getBehaviorGroups.query, newBehaviorGroup.mutate, props.bundleId, updateBehaviorActions.mutate ]);\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteBehaviorGroup = deleteBehaviorGroupMutation.mutate;\n        const response = await deleteBehaviorGroup(systemBehaviorGroup.id).finally(getBehaviorGroups.query);\n        return !response.error;\n    }, [ deleteBehaviorGroupMutation.mutate, systemBehaviorGroup.id, getBehaviorGroups.query ]);\n\n    const onClose = () => {\n        setShowModal(false);\n        getBehaviorGroups.query;\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        getBehaviorGroups.query;\n    };\n\n    if (getBehaviorGroups.loading) {\n        return <Spinner />;\n    }\n\n    if (getBehaviorGroups.payload?.status !== 200) {\n        return <span>Error while loading sysem behavior groups: {getBehaviorGroups.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel='h1'>\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbItem target='#' >{ props.bundle }\n                        </BreadcrumbItem>\n                        <BreadcrumbItem target='#'> System Behavior Groups </BreadcrumbItem>\n                    </Breadcrumb>\n                </Title>\n                <TableComposable aria-label=\"System behavior groups table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button' onClick={ createBehaviorGroup }> Create new group </Button>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { getBehaviorGroups.payload.value.map(b =>\n                            <Tr key={ b.id }>\n                                <Td>{ b.displayName }</Td>\n                                <Td>{ b.actions?.map(action => {\n                                    const properties = action.endpoint?.properties as Schemas.EmailSubscriptionProperties;\n                                    if (properties) {\n                                        if (properties.only_admins) {\n                                            return 'Admins';\n                                        } else {\n                                            return 'All users';\n                                        }\n                                    }\n                                }) }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        onClick={ () => editSystemBehaviorGroup(b) }\n                                    > { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        onClick={ () => deleteBehaviorGroupModal(b) }\n                                    >{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        )}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n            <CreateEditBehaviorGroupModal\n                isEdit={ isEdit }\n                initialSystemBehaviorGroup={ systemBehaviorGroup }\n                showModal={ showModal }\n                onClose={ onClose }\n                onSubmit={ handleSubmit }\n                isLoading={ false }\n            />\n            <DeleteBehaviorGroupModal\n                onDelete={ handleDelete }\n                bundleName={ props.bundle }\n                systemBehaviorGroupName={ systemBehaviorGroup.displayName }\n                isOpen={ showDeleteModal }\n                onClose={ onDeleteClose }\n            />\n        </React.Fragment>\n\n    );\n};\n\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    ActionGroup,\n    Button,\n    PageSection,\n    Split,\n    SplitItem,\n    Title\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nimport { useUserPermissions } from '../app/PermissionContext';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\nexport const EmailTemplatePage: React.FunctionComponent = () => {\n    const { isAdmin } = useUserPermissions();\n    const handleBackClick = React.useCallback(() => {\n        history.back();\n    }, []);\n\n    return (\n        <>{ isAdmin &&\n            <><PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\">Create an Email Template</Title>\n                    </SplitItem>\n                </Split>\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultSubjectTemplate }\n                    isMinimapVisible={ false }\n                    height=\"50px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    code={ defaultBodyTemplate }\n                    isMinimapVisible={ false }\n                    height=\"300px\" />\n            </PageSection><PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json } />\n            </PageSection>\n            <PageSection>\n                <ActionGroup>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button variant='primary' type='submit'>Submit</Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button variant='secondary' type='reset' onClick={ handleBackClick }>Back</Button>\n                        </SplitItem>\n                    </Split>\n                </ActionGroup>\n            </PageSection>\n            </>\n        }\n        </>\n    );\n};\n","import { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport {\n    Alert,\n    AlertVariant,\n    List,\n    ListItem,\n    PageSection,\n    Stack, StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { global_palette_green_400 } from '@patternfly/react-tokens';\nimport * as React from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nconst defaultPayload = JSON.stringify({}, null, 2);\n\ntype ValidationResult = {\n    code: string;\n    errors: Record<string, Array<string>>;\n}\n\nconst renderErrors = (errors: Record<string, Array<string>>) => {\n    const sortedKeys = Object.keys(errors).sort();\n    const flatErrors: Array<string> = [];\n    sortedKeys.forEach(key => {\n        errors[key].forEach(error => flatErrors.push(error));\n    });\n\n    return <List>\n        { flatErrors.map((value, index) => (<ListItem key={ index }>{ value }</ListItem>)) }\n    </List>;\n};\n\nexport const MessageValidatorPage: React.FunctionComponent = () => {\n\n    const validateService = useParameterizedQuery(Operations.ValidationResourceValidateMessage.actionCreator);\n\n    const [ message, setMessage ] = React.useState<string>(defaultPayload);\n    const [ validationResult, setValidationResult ] = React.useState<ValidationResult>();\n\n    const runValidation = React.useCallback(async () => {\n\n        let jsonMessage;\n        try {\n            jsonMessage = JSON.parse(message);\n        } catch (e: any) {\n            console.log(e);\n            setValidationResult({\n                errors: {\n                    $: [\n                        'Not a valid json: ' + e.message\n                    ]\n                },\n                code: message\n            });\n            return;\n        }\n\n        const response = await validateService.query({\n            body: jsonMessage\n        });\n\n        if (response.payload?.status === 200) {\n            setValidationResult({\n                errors: {},\n                code: message\n            });\n        } else if (response.payload?.status === 400) {\n            setValidationResult({\n                errors: response.payload.value.errors,\n                code: message\n            });\n        }\n\n    }, [ validateService, message ]);\n\n    const validatePayloadButton = <CodeEditorControl\n        icon={ <CheckCircleIcon color={ global_palette_green_400.value } /> }\n        toolTipText=\"Validates the message\"\n        onClick={ runValidation }\n    />;\n\n    let validationStatus: AlertVariant;\n    let validationMessage;\n\n    if (validationResult?.code === message) {\n        if (Object.keys(validationResult.errors).length === 0) {\n            validationStatus = AlertVariant.success;\n            validationMessage = 'Message is valid';\n        } else {\n            validationStatus = AlertVariant.danger;\n            validationMessage = <>\n                <div>Message is invalid:</div>\n                {renderErrors(validationResult.errors)}\n            </>;\n        }\n    } else {\n        validationStatus = AlertVariant.warning;\n        validationMessage = <>\n            <div>Message has not been validated. Use the validation button</div>\n            { validationResult?.errors && Object.keys(validationResult.errors).length > 0 && (\n                <>\n                    <div>Previous errors:</div>\n                    { renderErrors(validationResult.errors) }\n                </>\n            ) }\n        </>;\n    }\n\n    return  (\n        <>\n            <PageSection>\n                <Stack>\n                    <StackItem isFilled>\n                        <Title headingLevel=\"h1\" >Notification validator</Title>\n                    </StackItem>\n                    <StackItem>\n                        <span>You can use this utility to verify the notification you are sending is valid and tweak as needed.</span>\n                    </StackItem>\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Alert isInline title={ validationMessage } variant={ validationStatus }  />\n                <CodeEditor\n                    showEditor={ true }\n                    isUploadEnabled\n                    isDownloadEnabled\n                    isCopyEnabled\n                    isMinimapVisible={ false }\n                    customControls={ validatePayloadButton }\n                    code={ message }\n                    height=\"500px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setMessage }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type RenderEmailRequest = {\n    subject: string;\n    body: string;\n    payload: string;\n}\n\nconst actionCreator = (params: RenderEmailRequest) => Operations.TemplateResourceRenderEmailTemplate.actionCreator({\n    body: {\n        subject_template: params.subject,\n        body_template: params.body,\n        payload: params.payload\n    }\n});\n\nexport const useRenderEmailRequest = () => {\n    return useMutation(actionCreator);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    HelperText,\n    HelperTextItem,\n    PageSection,\n    Spinner,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { Button } from '@patternfly/react-core/';\nimport * as React from 'react';\n\nimport { useRenderEmailRequest } from '../services/RenderEmailRequest';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\ntype RenderedTemplateProps = {\n    isLoading: true;\n} | {\n   isLoading: false;\n   succeeded: true;\n   subject: string;\n   body: string;\n} | {\n    isLoading: false;\n    succeeded: false;\n    error: string;\n};\n\nconst RenderedTemplate: React.FunctionComponent<RenderedTemplateProps> = props => {\n    if (props.isLoading) {\n        return <Spinner />;\n    }\n\n    if (props.succeeded) {\n        return (\n            <>\n                <StackItem>\n                    <span><strong>Subject:</strong> { props.subject }</span>\n                </StackItem>\n                <StackItem>\n                    <strong>Body:</strong>\n                </StackItem>\n                <StackItem>\n                    <iframe width=\"100%\" srcDoc={ props.body } />\n                </StackItem>\n            </>\n        );\n    }\n\n    return (\n        <StackItem>\n            <HelperText>\n                <HelperTextItem variant=\"error\">{ props.error }</HelperTextItem>\n            </HelperText>\n        </StackItem>\n    );\n};\n\nexport const RenderEmailPage: React.FunctionComponent = () => {\n    const emailTemplate = useRenderEmailRequest();\n    const [ subjectTemplate, setSubjectTemplate ] = React.useState<string | undefined>(defaultSubjectTemplate);\n    const [ bodyTemplate, setBodyTemplate ] = React.useState<string | undefined>(defaultBodyTemplate);\n    const [ payload, setPayload ] = React.useState<string | undefined>(defaultPayload);\n\n    React.useEffect(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n        // We only want to activate this once\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ ]);\n\n    let renderedProps: RenderedTemplateProps;\n\n    if (emailTemplate.loading) {\n        renderedProps = {\n            isLoading: true\n        };\n    } else if (emailTemplate.payload?.status === 200) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: true,\n            subject: emailTemplate.payload.value.subject ?? '',\n            body: emailTemplate.payload.value.body ?? ''\n        };\n    } else if (emailTemplate.payload?.status === 400) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: emailTemplate.payload.value.message ?? 'Unknown error'\n        };\n    } else {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: 'Unknown error'\n        };\n    }\n\n    const onRender = React.useCallback(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n    }, [ emailTemplate.mutate, subjectTemplate, bodyTemplate, payload ]);\n\n    return (\n        <>\n            <PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\" >Email templates</Title>\n                    </SplitItem>\n                    <SplitItem>\n                        <Button onClick={ onRender }>Render</Button>\n                    </SplitItem>\n                </Split>\n            </PageSection>\n            <PageSection>\n                <Stack>\n                    <StackItem>\n                        <Title headingLevel=\"h2\">Result</Title>\n                    </StackItem>\n                    <RenderedTemplate { ...renderedProps }  />\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultSubjectTemplate }\n                    height=\"50px\"\n                    onChange={ setSubjectTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultBodyTemplate }\n                    height=\"300px\"\n                    onChange={ setBodyTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setPayload }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport { AggregationPage } from './pages/AggregationPage';\nimport { ApplicationPage } from './pages/ApplicationPage';\nimport { BundlePage } from './pages/BundlePage';\nimport { EmailTemplatePage } from './pages/EmailTemplatePage';\nimport { MessageValidatorPage } from './pages/MessageValidatorPage';\nimport { RenderEmailPage } from './pages/RenderEmailPage';\n\ninterface Path {\n    readonly path: string;\n    readonly component: React.ComponentType;\n}\n\nexport const linkTo = {\n    bundle: (bundleId: string) => `/bundle/${bundleId}`,\n    application: (applicationId: string) => `/application/${applicationId}`,\n    aggregation: () => '/aggregation',\n    email: () => '/email',\n    emailTemplates: () => `/emailTemplates`,\n    messageValidator: () => '/utils/message-validator'\n};\n\nconst pathRoutes: Path[] = [\n    {\n        path: linkTo.aggregation(),\n        component: AggregationPage\n    },\n    {\n        path: linkTo.application(':applicationId'),\n        component: ApplicationPage\n    },\n    {\n        path: linkTo.bundle(':bundleId'),\n        component: BundlePage\n    },\n    {\n        path: linkTo.email(),\n        component: RenderEmailPage\n    },\n    {\n        path: linkTo.emailTemplates(),\n        component: EmailTemplatePage\n    },\n    {\n        path: linkTo.messageValidator(),\n        component: MessageValidatorPage\n    }\n];\n\nexport const Routes: React.FunctionComponent<unknown> = _props => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <Route\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                />\n            )) }\n            <Redirect to={ linkTo.aggregation() } />\n        </Switch>\n    );\n};\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner, Title, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useParameterizedQuery } from 'react-fetching-library';\nimport { useParams } from 'react-router';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { EmailTemplateTable } from '../components/EmailTemplates/EmailTemplateTable';\nimport { CreateEditModal } from '../components/EventTypes/CreateEditModal';\nimport { DeleteModal } from '../components/EventTypes/DeleteModal';\nimport { BreadcrumbLinkItem } from '../components/Wrappers/BreadCrumbLinkItem';\nimport { linkTo } from '../Routes';\nimport { useCreateEventType } from '../services/EventTypes/CreateEventTypes';\nimport { useDeleteEventType } from '../services/EventTypes/DeleteEventType';\nimport { useApplicationTypes } from '../services/EventTypes/GetApplication';\nimport { getBundleAction  } from '../services/EventTypes/GetBundleAction';\nimport { EventType } from '../types/Notifications';\nimport { useEventTypes } from './ApplicationPage/useEventTypes';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const ApplicationPage: React.FunctionComponent = () => {\n    const { hasPermission, isAdmin } = useUserPermissions();\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const eventTypesQuery = useEventTypes(applicationId);\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n    const deleteEventTypeMutation = useDeleteEventType();\n    const newEvent = useCreateEventType();\n\n    const columns = [ 'Event Type', 'Name', 'Event Type Id' ];\n\n    const [ eventTypes, setEventTypes ] = React.useState<Partial<EventType>>({});\n\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n\n    const getBundleId = React.useMemo(() => {\n        if (applicationTypesQuery.payload?.type === 'Application') {\n            return applicationTypesQuery.payload.value.bundleId;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload ]);\n\n    const bundleNameQuery = useParameterizedQuery(getBundleAction);\n\n    React.useEffect(() => {\n        const query = bundleNameQuery.query;\n        if (getBundleId) {\n            query(getBundleId);\n        }\n    }, [ getBundleId, bundleNameQuery.query ]);\n\n    const bundle = React.useMemo(() => {\n        if (bundleNameQuery.payload?.status === 200) {\n            return bundleNameQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ bundleNameQuery.payload?.status, bundleNameQuery.payload?.value ]);\n\n    const application = useMemo(() => {\n        if (applicationTypesQuery.payload?.status === 200) {\n            return applicationTypesQuery.payload.value;\n        }\n\n        return undefined;\n    }, [ applicationTypesQuery.payload?.status, applicationTypesQuery.payload?.value ]);\n\n    const createEventType = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setEventTypes({});\n    };\n\n    const handleSubmit = React.useCallback((eventType) => {\n        setShowModal(false);\n        const mutate = newEvent.mutate;\n        mutate({\n            id: eventType.id,\n            displayName: eventType.displayName ?? '',\n            name: eventType.name ?? '',\n            description: eventType.description ?? '',\n            applicationId\n\n        })\n        .then (eventTypesQuery.reload);\n\n    }, [ applicationId, eventTypesQuery.reload, newEvent.mutate ]);\n\n    const editEventType = (e: EventType) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setEventTypes(e);\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteEventType = deleteEventTypeMutation.mutate;\n        const response = await deleteEventType(eventTypes.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ deleteEventTypeMutation.mutate, eventTypes.id ]);\n\n    const deleteEventTypeModal = (e: EventType) => {\n        setShowDeleteModal(true);\n        setEventTypes(e);\n    };\n\n    const onClose = () => {\n        setShowModal(false);\n        eventTypesQuery.reload();\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        eventTypesQuery.reload();\n    };\n\n    if (eventTypesQuery.error) {\n        return <span>Error while loading eventtypes: {eventTypesQuery.error.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\">\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbLinkItem to={ linkTo.bundle(getBundleId ?? '') }>\n                            { bundle ? bundle.display_name : <Spinner /> }\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbItem to='#' isActive> { (applicationTypesQuery.loading\n                        || applicationTypesQuery.payload?.status !== 200) ? <Spinner /> : applicationTypesQuery.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb></Title>\n                <TableComposable\n                    aria-label=\"Event types table\"\n                >\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ createEventType }> Create Event Type </Button>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>{ (eventTypesQuery.data?.length === 0 ? 'There are no event types found for this application' : '') }</Tbody>\n                    <Tbody>\n                        { eventTypesQuery.data?.map((e: EventType) => (\n                            <Tr key={ e.id }>\n                                <Td>{ e.displayName }</Td>\n                                <Td>{ e.name }</Td>\n                                <Td>{ e.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ () => editEventType(e) }> { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled={ !application || !hasPermission(application?.id) }\n                                        onClick={ () => deleteEventTypeModal(e) }>{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n            { isAdmin && <EmailTemplateTable\n                application={ application?.displayName ?? '' }\n            /> }\n            <CreateEditModal\n                isEdit={ isEdit }\n                initialEventType={ eventTypes }\n                showModal={ showModal }\n                applicationName={ application?.displayName }\n                onClose={ onClose }\n                onSubmit={ handleSubmit }\n                isLoading={ eventTypesQuery.loading }\n            />\n            <DeleteModal\n                onDelete={ handleDelete }\n                isOpen={ showDeleteModal }\n                onClose={ onDeleteClose }\n                eventTypeName={ eventTypes.name }\n                applicationName={ application?.displayName }\n                bundleName={ bundle?.display_name }\n            />\n        </React.Fragment>\n\n    );\n};\n","import produce, { original } from 'immer';\nimport { useEffect, useState } from 'react';\nimport { useClient } from 'react-fetching-library';\n\nimport {\n    Operations\n} from '../../generated/OpenapiInternal';\nimport { useEventTypes as useGetEventTypes } from '../../services/EventTypes/GetEventTypes';\nimport { EventTypeRow } from '../../types/Notifications';\n\ninterface EventTypesController {\n    payload: any;\n    data: ReadonlyArray<EventTypeRow> | undefined;\n    loading: boolean;\n    reload: () => void;\n    error: any;\n}\n\nexport const useEventTypes = (applicationId: string): EventTypesController => {\n    const [ eventTypeRows, setEventTypeRows ] = useState<ReadonlyArray<EventTypeRow>>();\n    const eventTypesQuery = useGetEventTypes(applicationId);\n\n    const { query } = useClient();\n\n    useEffect(() => {\n        setEventTypeRows(undefined);\n    }, [ applicationId ]);\n\n    useEffect(() => {\n        if (eventTypesQuery.payload?.status === 200) {\n            const eventTypes = eventTypesQuery.payload.value.map<EventTypeRow>(e => ({\n                ...e,\n                instantEmail: {\n                    isLoading: true\n                }\n            }));\n\n            setEventTypeRows(eventTypes);\n\n            eventTypes.forEach(row => {\n                query(Operations.TemplateResourceGetInstantEmailTemplateByEventType.actionCreator({\n                    eventTypeId: row.id\n                }))\n                .then(result => {\n                    if (result.payload?.status === 200 || result.payload?.status === 404) {\n                        const value = result.payload.status === 200 ? result.payload.value.id : undefined;\n                        setEventTypeRows(produce(draft => {\n                            const originalValue = original(draft);\n                            if (draft && originalValue) {\n                                const index = originalValue.findIndex(r => r.id === row.id);\n                                if (index !== -1) {\n                                    draft[index].instantEmail = {\n                                        isLoading: false,\n                                        id: value === null ? undefined : value\n                                    };\n                                }\n                            }\n                        }));\n                    }\n                });\n            });\n        }\n    }, [ eventTypesQuery.payload, eventTypesQuery.loading, query ]);\n\n    return {\n        payload: eventTypeRows,\n        data: eventTypeRows,\n        loading: eventTypesQuery.loading,\n        reload: eventTypesQuery.query,\n        error: eventTypesQuery.errorObject\n    };\n};\n","import { Breadcrumb, BreadcrumbItem, Button, PageSection, Spinner,\n    Title, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { PencilAltIcon, TrashIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { useUserPermissions } from '../app/PermissionContext';\nimport { CreateEditApplicationModal } from '../components/Applications/CreateEditApplicationModal';\nimport { DeleteApplicationModal } from '../components/Applications/DeleteApplicationModal';\nimport { ListEventTypes } from '../components/EventTypes/ListEventTypes';\nimport { linkTo } from '../Routes';\nimport { useCreateApplication } from '../services/Applications/CreateApplication';\nimport { useDeleteApplication } from '../services/Applications/DeleteApplication';\nimport { useApplications } from '../services/Applications/GetApplicationById';\nimport { useBundleTypes } from '../services/Applications/GetBundleById';\nimport { Application, RoleOwnedApplication } from '../types/Notifications';\nimport { BehaviorGroupsTable } from './BundlePage/BehaviorGroupTable';\n\ntype BundlePageParams = {\n    bundleId: string;\n}\n\nexport const BundlePage: React.FunctionComponent = () => {\n    const { hasPermission, refresh, isAdmin } = useUserPermissions();\n    const { bundleId } = useParams<BundlePageParams>();\n    const getBundles = useBundleTypes(bundleId);\n    const getApplications = useApplications(bundleId);\n    const newApplication = useCreateApplication();\n    const deleteApplicationMutation = useDeleteApplication();\n\n    const columns = [ 'Application', 'Name', 'Event Types', 'Application Id' ];\n\n    const [ application, setApplication ] = React.useState<Partial<Application>>({});\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ showDeleteModal, setShowDeleteModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n\n    const bundle = React.useMemo(() => {\n        if (getBundles.payload?.status === 200) {\n            return getBundles.payload.value;\n        }\n\n        return undefined;\n    }, [ getBundles.payload?.status, getBundles.payload?.value ]);\n\n    const createApplication = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setApplication({});\n    };\n\n    const editApplication = (a: Application) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setApplication(a);\n\n    };\n\n    const handleSubmit = React.useCallback((application: Partial<RoleOwnedApplication>) => {\n        setShowModal(false);\n        const mutate = newApplication.mutate;\n        mutate({\n            id: application.id,\n            displayName: application.displayName ?? '',\n            name: application.name ?? '',\n            bundleId,\n            ownerRole: application.ownerRole\n        })\n        .then(r => {\n            if (r.payload?.status === 200 && !isAdmin) {\n                refresh();\n            }\n\n            return r;\n        })\n        .then(getApplications.query);\n\n    }, [ bundleId, getApplications.query, newApplication.mutate, isAdmin, refresh ]);\n\n    const onClose = () => {\n        setShowModal(false);\n        setApplication({});\n        getApplications.query();\n    };\n\n    const handleDelete = React.useCallback(async () => {\n        setShowDeleteModal(false);\n        const deleteApplication = deleteApplicationMutation.mutate;\n        const response = await deleteApplication(application.id);\n        if (response.error) {\n            return false;\n        }\n\n        return true;\n    }, [ application.id, deleteApplicationMutation.mutate ]);\n\n    const deleteApplicationModal = (a: Application) => {\n        setShowDeleteModal(true);\n        setApplication(a);\n    };\n\n    const onDeleteClose = () => {\n        setShowDeleteModal(false);\n        getApplications.query();\n    };\n\n    if (getApplications.loading) {\n        return <Spinner />;\n    }\n\n    if (getApplications.payload?.status !== 200) {\n        return <span>Error while loading applications: {getApplications.errorObject.toString()}</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel='h1'>\n                    <Breadcrumb>\n                        <BreadcrumbItem target='#'> Bundles </BreadcrumbItem>\n                        <BreadcrumbItem target='#' >{ (getBundles.loading || getBundles.payload?.status !== 200)\n                            ? <Spinner /> : getBundles.payload.value.displayName }\n                        </BreadcrumbItem>\n                    </Breadcrumb>\n                </Title>\n                <TableComposable aria-label=\"Applications table\">\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button' onClick={ createApplication }> Create Application </Button>\n                                    {showModal && <CreateEditApplicationModal\n                                        isEdit={ isEdit }\n                                        bundleName={ bundle?.displayName }\n                                        initialApplication={ application }\n                                        showModal={ showModal }\n                                        applicationName={ application.displayName }\n                                        onClose={ onClose }\n                                        onSubmit={ handleSubmit }\n                                        isLoading={ getApplications.loading }\n\n                                    />\n                                    }\n                                    <React.Fragment>\n                                        <DeleteApplicationModal\n                                            onDelete={ handleDelete }\n                                            isOpen={ showDeleteModal }\n                                            onClose={ onDeleteClose }\n                                            applicationName={ application.displayName }\n                                            bundleName={ bundle?.displayName }\n\n                                        />\n                                    </React.Fragment>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { getApplications.payload.value.map(a =>\n                            <Tr key={ a.id }>\n                                <Td>\n                                    <Button variant=\"link\" component={ (props: any) =>\n                                        <Link { ...props } to={ linkTo.application(a.id) } /> }>{ a.displayName }</Button>\n                                </Td>\n                                <Td>{ a.name}</Td>\n                                <Td>\n                                    <ListEventTypes\n                                        appId={ a.id }\n                                    />\n                                </Td>\n                                <Td>{ a.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        isDisabled={ !hasPermission(a.id) }\n                                        onClick={ () => editApplication(a) }\n                                    > { <PencilAltIcon /> } </Button></Td>\n                                <Td>\n                                    <Button className='delete' type='button' variant='plain'\n                                        isDisabled={ !isAdmin }\n                                        onClick={ () => deleteApplicationModal(a) }\n\n                                    >{ <TrashIcon /> } </Button></Td>\n                            </Tr>\n                        )}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n            <BehaviorGroupsTable\n                bundleId={ bundleId }\n                bundle={ bundle?.displayName } />\n        </React.Fragment>\n\n    );\n};\n\n","import { Nav, NavExpandable, NavItem, NavList } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport { linkTo } from '../Routes';\nimport { Bundle } from '../types/Notifications';\n\ntype EnhancedNavItemProps = {\n    to: string;\n}\n\nconst EnhancedNavItem: React.FunctionComponent<EnhancedNavItemProps> = props => {\n    const match = useRouteMatch({\n        path: props.to,\n        exact: true\n    });\n\n    return (\n        <NavItem isActive={ !!match }>\n            <Link to={ props.to }>\n                { props.children }\n            </Link>\n        </NavItem>\n    );\n};\n\nexport interface NavigationProps {\n    bundles: ReadonlyArray<Bundle>;\n}\n\nexport const Navigation: React.FunctionComponent<NavigationProps> = props => {\n    return (\n        <Nav>\n            <NavList>\n                <NavExpandable title='Bundles'>\n                    { props.bundles.map(b => (\n                        <EnhancedNavItem key={ b.id } to={ linkTo.bundle(b.id) }>{ b.displayName }\n                        </EnhancedNavItem>\n                    )) }\n                </NavExpandable>\n                <NavExpandable title=\"Utils\" isExpanded>\n                    <EnhancedNavItem to={ linkTo.messageValidator() }>\n                        Notification validator\n                    </EnhancedNavItem>\n                </NavExpandable>\n                <EnhancedNavItem to={ linkTo.email() }>\n                    Email templates\n                </EnhancedNavItem>\n                <EnhancedNavItem to={ linkTo.aggregation() }>\n                    Aggregation\n                </EnhancedNavItem>\n            </NavList>\n        </Nav>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/redhat-logo.f7405300.svg\";","import '@patternfly/react-core/dist/styles/base.css';\nimport './app.css';\n\nimport { Alert, AlertVariant, Brand, Page, PageHeader, PageSection, PageSidebar, Spinner } from '@patternfly/react-core';\nimport React, { useMemo } from 'react';\nimport { style } from 'typestyle';\n\nimport { Routes } from '../Routes';\nimport { useBundles } from '../services/EventTypes/GetBundles';\nimport { usePermissions } from '../services/Permissions';\nimport { useServerInfo } from '../services/ServerInfo';\nimport { Navigation } from './Navigation';\nimport { PermissionContext } from './PermissionContext';\nimport logo from './redhat-logo.svg';\n\nconst brandClassName = style({\n    width: 150\n});\n\ntype Message = {\n    show: false;\n} | {\n    show: true;\n    content: string;\n}\n\nexport const App: React.FunctionComponent<unknown> = () => {\n\n    const [ isNavOpen, setNavOpen ] = React.useState(true);\n\n    const onNavToggle = React.useCallback(() => setNavOpen(prev => !prev), [ setNavOpen ]);\n\n    const bundles = useBundles();\n    const serverInfo = useServerInfo();\n\n    const message = useMemo<Message>(() => {\n        const payload = serverInfo.payload;\n        if (payload?.status === 200) {\n            if (payload.value.environment === 'PROD') {\n                return {\n                    show: true,\n                    content: 'You are viewing the production environment - '\n                    + 'Any change you make here will be applied immediately and could disrupt the service.'\n                };\n            }\n\n            return {\n                show: false\n            };\n        }\n\n        return {\n            show: true,\n            content: 'Could not load the current environment. Please verify the URL before making any change.'\n        };\n    }, [ serverInfo.payload ]);\n    const permissionQuery = usePermissions();\n\n    const appHeader = <PageHeader\n        showNavToggle\n        logo={ <Brand className={ brandClassName } src={ logo } alt=\"Red Hat\" /> }\n        logoProps={ { href: '/internal' } }\n        isNavOpen={ isNavOpen }\n        onNavToggle={ onNavToggle }\n    />;\n\n    const permission = React.useMemo<PermissionContext>(() => {\n        const payload = permissionQuery.payload;\n        if (payload?.status === 200) {\n            return {\n                isAdmin: payload.value.is_admin,\n                applications: payload.value.applications.map(a => ({\n                    id: a.id,\n                    displayName: a.display_name\n                })),\n                roles: payload.value.roles,\n                refresh: permissionQuery.query\n            };\n        }\n\n        return {\n            isAdmin: false,\n            applications: [],\n            roles: [],\n            refresh: permissionQuery.query\n        };\n    }, [ permissionQuery.payload, permissionQuery.query ]);\n\n    if (bundles.isLoading || serverInfo.loading || permissionQuery.loading) {\n        return (\n            <Page\n                header={ appHeader }\n            >\n                <PageSection>\n                    <Spinner />\n                </PageSection>\n            </Page>\n        );\n    }\n\n    const appSidebar = <PageSidebar nav={ <Navigation bundles={ bundles.bundles } /> } isNavOpen={ isNavOpen } />;\n\n    return (\n        <PermissionContext.Provider value={ permission }>\n            <Page\n                sidebar={ appSidebar }\n                header={ appHeader }>\n                { message.show && (\n                    <PageSection>\n                        <Alert variant={ AlertVariant.warning } title={ message.content } />\n                    </PageSection>\n                )}\n                <Routes />\n            </Page>\n        </PermissionContext.Provider>\n    );\n};\n","import produce from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { QueryResponse, useClient } from 'react-fetching-library';\nimport { useUnmountPromise } from 'react-use';\n\nimport { Operations } from '../../generated/OpenapiInternal';\nimport { Bundle } from '../../types/Notifications';\n\nexport const useBundles = () => {\n    const client = useClient();\n    const mounted = useUnmountPromise();\n\n    const [ bundles, setBundles ] = useState<ReadonlyArray<Bundle>>([]);\n\n    const [ isLoading, setLoading ] = useState<boolean>();\n\n    const query = useCallback(async () => {\n        const cQuery = client.query;\n        setLoading(true);\n\n        const bundleResponse = await cQuery(Operations.InternalResourceGetBundles.actionCreator());\n\n        if (bundleResponse.payload?.status === 200) {\n\n            const bundles: ReadonlyArray<Bundle> = bundleResponse.payload.value.map(bundleResponse => ({\n                id: bundleResponse.id ?? '',\n                displayName: bundleResponse.display_name,\n                applications: []\n            }));\n\n            const applicationsPromises: Array<Promise<QueryResponse<Operations.InternalResourceGetApplications.Payload>>> = [];\n            for (const bundle of bundleResponse.payload.value) {\n                if (bundle.id) {\n                    applicationsPromises.push(cQuery(Operations.InternalResourceGetApplications.actionCreator({\n                        bundleId: bundle.id\n                    })));\n                }\n            }\n\n            const applicationResponses = await Promise.all(applicationsPromises);\n\n            const reducedBundles = applicationResponses.map(r => r.payload).reduce((bundles, applications) => produce(bundles, draftBundles => {\n                if (applications?.status === 200) {\n                    const draftBundle = draftBundles.find(b => applications.value.length > 0 && b.id === applications.value[0].bundle_id);\n                    if (draftBundle) {\n                        draftBundle.applications = applications.value.map(a => ({\n                            id: a.id ?? '',\n                            displayName: a.display_name,\n                            name: a.name,\n                            bundleId: a.bundle_id\n                        }));\n                    }\n                }\n            }), bundles);\n\n            (await mounted(Promise.resolve(() => setBundles((reducedBundles)))))();\n        }\n\n        setLoading(false);\n    }, [ client.query, mounted ]);\n\n    useEffect(() => {\n        query();\n    }, [ query ]);\n\n    return {\n        bundles,\n        isLoading\n    };\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const useServerInfo = () => {\n    return useQuery(Operations.InternalResourceGetServerInfo.actionCreator());\n};\n","import { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport const usePermissions = () => {\n    return useQuery(Operations.InternalPermissionResourceGetPermissions.actionCreator());\n};\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ClientContextProvider, createClient } from 'react-fetching-library';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app/App';\n\nconst client = createClient({\n    responseInterceptors: [ validateSchemaResponseInterceptor ]\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ClientContextProvider client={ client }>\n                <App />\n            </ClientContextProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}